# {{this}}
{{BuildTypeMapping = {
    "Static": "STATIC",
    "Dynamic": "SHARED"
}~}}

cmake_minimum_required(VERSION 3.10)

# 设置构建项目目录
set(BUILD_PROJECT_DIR "${CMAKE_CURRENT_SOURCE_DIR}/BuildProject")
set(OUTPUT_DIR ${CMAKE_SOURCE_DIR}/Output)
# 设置运行时、库和归档输出目录
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/Bin)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/Lib)
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/Lib)


{{~if IsPrimaryProject ~}}

project({{Project.Name}})

{{~for subDirectory in SubDirectories ~}}
add_subdirectory({{subDirectory}})
{{~end~}}

{{~else if Project.CppSubType == "Source"~}}

project({{Project.Name}})


# 设置C++标准
set(CMAKE_CXX_STANDARD {{Project.PrimaryCompileEnvironment.CppVersion | string.replace "Cpp" ""}})

{{~for FindPackage in FindPackages~}}
find_package({{FindPackage}} REQUIRED)
{{~end~}}

{{~if Project.PrimaryCompileEnvironment.BuildType == "Main"~}}
# 源文件
add_executable({{Project.Name}}
{{~else~}}
add_library({{Project.Name}} {{BuildTypeMapping[Project.PrimaryCompileEnvironment.BuildType]}}
{{~end~}}
{{for SourceFile in Project.PrimaryCompileEnvironment.SourceFiles~}} ${CMAKE_SOURCE_DIR}/{{SourceFile.RelativeEnginePath}}
{{end~}}
)

# 源文件对应的头文件
target_include_directories({{Project.Name}} PRIVATE
{{for RelativeHeaderPath in RelativeHeaderPaths~}} ${CMAKE_SOURCE_DIR}/{{ RelativeHeaderPath }}
{{end~}}
)

# 第三方项目
target_link_libraries({{Project.Name}} PRIVATE
{{for ReferenceProject in ReferenceProjects~}} {{ ReferenceProject.Name }}
{{end~}}
{{for dependLib in DependLibs~}} {{ dependLib }}
{{end~}}
)

# 第三方项目头文件
target_include_directories({{Project.Name}} PRIVATE
{{for directory in IncludeDirectories~}} ${CMAKE_SOURCE_DIR}/{{ directory.RelativeEnginePath }}
{{end~}}
)

# 添加编译定义
target_compile_definitions({{Project.Name}} PRIVATE
{{~for Definition in Project.PrimaryCompileEnvironment.Definitions~}}
{{Definition}}
{{~end~}}
)

{{~else if Project.CppSubType == "Library"~}}

# 创建一个接口库
add_library({{Project.Name}} INTERFACE)

{{~if Project.PrecompileEnvironment.DllPaths.size > 0~}}
# 复制动态链接库
file(COPY {{for path in Project.PrecompileEnvironment.DllPaths~}} ${CMAKE_SOURCE_DIR}/{{path.RelativeEnginePath}} {{end~}} DESTINATION ${CMAKE_RUNTIME_OUTPUT_DIRECTORY})
{{~end~}}

# 链接到预编译的库和包含头文件的目录
target_link_libraries({{Project.Name}} INTERFACE
{{for path in Project.PrecompileEnvironment.LibPaths~}} ${CMAKE_SOURCE_DIR}/{{ path.RelativeEnginePath }}
{{end~}}
)

target_include_directories({{Project.Name}} INTERFACE
{{for file in Project.PrecompileEnvironment.IncludePaths~}} ${CMAKE_SOURCE_DIR}/{{ file.RelativeEnginePath }}
{{end~}}
{{for directory in Project.PrecompileEnvironment.AdditionalIncludePaths~}} ${CMAKE_SOURCE_DIR}/{{ directory.RelativeEnginePath }}
{{end~}}
)

{{~end~}}






